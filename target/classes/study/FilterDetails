Filter:过滤器
 *：web三大组件-> Servlet Filter Listener
当访问服务器资源时，过滤器将请求拦下来，完成一些特殊功能。
for：一般用于完成通用操作，eg--->登录验证，只有登陆过的用户能正常使用。
                         eg--->统一编码处理，敏感字过滤。

快速使用--> 1，定义一个类，实现Filter接口
           2，重写方法
           3，配置拦截路径。--> web.xml配置或者注解配置 @WebFilter("/*")
web.xml配置
   <filter>
        <filter-name>filter1</filter-name>
        <filter-class>cn.tyz.mirror.web.filter.FilterDemo</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>filter1</filter-name>
        <!-- 拦截路径，跟servlet对比，人是访问路径 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
过滤器执行流程
    执行过滤器-->执行放行后的资源-->回来执行过滤器放行代码下边的代码。
过滤器生命周期方法
    服务器启动时init(用于加载资源) 每一次请求过滤时doFilter， 服务器正常关闭时destroy(用于释放资源) 一次启动，一次销毁。
过滤器配置详解
    拦截路径的配置：
        1，具体资源路径 eg：/index.jsp 只会拦截这个资源 拦截特定资源，不好使
        2，拦截目录    eg：/user/*  访问user下所有资源时都会被拦截。
        3，后缀名拦截  eg：*.jsp 访问所有后缀名为jsp的资源时，过滤器都会被执行，？？正则表达式？
        4，拦截all resource /* 大伙一块遭重，舒服。
    拦截方式的配置：资源被访问的方式？请求，转发。
        1，注解配置设置dispatcherTypes属性
            1，REQUEST: 请求访问资源 默认值
            2, FORWARD: 转发访问资源
            3, INCLUDE: 包含访问资源
            4, ERROR:   错误跳转资源
            5, ASYNC:   异步访问资源
        2，web.xml配置
            设置<dispatcher></dispatcher>
过滤器链(配置多个过滤器)
        执行顺序：如果有两个过滤器，filter1 filter2
        filter1 --> filter2 --> 资源执行 --> filter2 --> filter1
   过滤器先后顺序问题：
           1，注解配置：按照类名的字符串比较规则比较，值小先执行。eg AFilter，BFilter，AFilter会先执行。(字典顺序？)
           2，web.xml配置的，谁的<filter-mapping></filter-mapping>在上边谁声音大。
 案例1，登录验证。

 案例2_敏感词汇过滤
			* 需求：
				1. 对day17_case案例录入的数据进行敏感词汇过滤
				2. 敏感词汇参考《敏感词汇.txt》
				3. 如果是敏感词汇，替换为 ***

			* 分析：
				1. 对request对象进行增强。增强获取参数相关方法
				2. 放行。传递代理对象


			* 增强对象的功能：
				* 设计模式：一些通用的解决固定问题的方式
				1. 装饰模式
				2. 代理模式
					* 概念：
						1. 真实对象：被代理的对象
						2. 代理对象：
						3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的
				 	* 实现方式：
					 	1. 静态代理：有一个类文件描述代理模式
					 	2. 动态代理：在内存中形成代理类
							* 实现步骤：
								1. 代理对象和真实对象实现相同的接口
								2. 代理对象 = Proxy.newProxyInstance();
								3. 使用代理对象调用方法。
								4. 增强方法

							* 增强方式：
								1. 增强参数列表
								2. 增强返回值类型
								3. 增强方法体执行逻辑

